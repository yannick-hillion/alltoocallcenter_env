Metadata-Version: 2.1
Name: django-rest-framework-braces
Version: 0.3.4
Summary: Collection of utilities for working with DRF
Home-page: https://github.com/dealertrack/django-rest-framework-braces
Author: Miroslav Shubernetskiy
Author-email: UNKNOWN
License: MIT
Keywords: django-rest-framework
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Development Status :: 2 - Pre-Alpha
Requires-Dist: dateutils
Requires-Dist: django
Requires-Dist: djangorestframework
Requires-Dist: pytz
Requires-Dist: six
Requires-Dist: setuptools

============================
Django Rest Framework Braces
============================

.. image:: https://badge.fury.io/py/django-rest-framework-braces.png
    :target: http://badge.fury.io/py/django-rest-framework-braces

.. image:: https://travis-ci.org/dealertrack/django-rest-framework-braces.svg?branch=master
    :target: https://travis-ci.org/dealertrack/django-rest-framework-braces

.. image:: https://coveralls.io/repos/dealertrack/django-rest-framework-braces/badge.svg
    :target: https://coveralls.io/r/dealertrack/django-rest-framework-braces

Collection of utilities for working with DRF. Name inspired by `django-braces <https://github.com/brack3t/django-braces>`_.

* Free software: MIT license
* GitHub: https://github.com/dealertrack/django-rest-framework-braces
* Documentation: https://django-rest-framework-braces.readthedocs.io.

Installing
----------

Easiest way to install ``django-rest-framework-braces`` is by using ``pip``::

    $ pip install django-rest-framework-braces

Usage
-----

Once installed, you can use any of the supplied utilities by simply importing them.
For example::

    from drf_braces.mixins import MultipleSerializersViewMixin

    class MyViewSet(MultipleSerializersViewMixin, GenericViewSet):
        def create(self, request):
            serializer = self.get_serializer(serializer_class=MySerializer)
            ...

For full list of available utilities, please refer to the `documentation <https://django-rest-framework-braces.readthedocs.io>`_.

Testing
-------

To run the tests you need to install testing requirements first::

    $ make install

Then to run tests, you can use use Makefile command::

    $ make test




History
-------

0.3.4 (2019-02-25)
~~~~~~~~~~~~~~~~~~

* Added ``EnforceValidationFieldMixin.capture_failed_field``, ``FormSerializerFieldMixin.capture_failed_field``,
  and ``FormSerializerBase.capture_failed_fields`` to capture the optional fields that failed.

0.3.3 (2019-02-21)
~~~~~~~~~~~~~~~~~~

* Fixing invalid data being copied over in ``FormSerializer`` when fail mode is not ``fail``

0.3.2 (2018-11-21)
~~~~~~~~~~~~~~~~~~

* Fixing ``DoubleAsStrJsonEncoder`` by subclassing from DRF which supports datetimes, etc

0.3.1 (2018-11-07)
~~~~~~~~~~~~~~~~~~

* Fixing ``SwappingSerializerMixin`` by supporting ``ListSerializer``

0.3.0 (2018-11-05)
~~~~~~~~~~~~~~~~~~

* Added ``SwappingSerializerMixin``.
  Allows to declaratively swap fields any field instances in child serializers.
* Added ``DoubleAsStrJsonEncoder`` for handicapped API clients.

0.2.3 (2017-10-18)
~~~~~~~~~~~~~~~~~~

* Fixed how choices are normalized in ``SerializerForm`` to ``[(key, key)]``
  vs previously ``[(key, value)]`` to match DRF's handling of choices unlike Django forms.
* Added support for ``Form.all_fields`` and ``Form.all_base_fields``
  in ``SerializerForm`` which supports custom form classes which implement such API.
* Added support for ``FormSerializer.Meta.exclude`` which allows to specify fields to exclude.

0.2.2 (2017-05-09)
~~~~~~~~~~~~~~~~~~

* Added ``rounding`` parameter to ``RoundedDecimalField`` which allows to define rounding direction
  when rounding value.

0.2.1 (2017-04-27)
~~~~~~~~~~~~~~~~~~

* Fixed bugs in ``RoundedDecimalField``

0.2.0 (2017-04-25)
~~~~~~~~~~~~~~~~~~

* Added ``RoundedDecimalField`` for rounding off decimal to specified ``decimal_places``
  instead of validing that higher precision is not allowed
* Added ``URLField`` for automatic mapping between django forms and DRF serializers

0.1.6 (2016-02-29)
~~~~~~~~~~~~~~~~~~

* Fixed a bug in ``SerializerForm`` in which form cleaned data was replaced with serializer data
  instead of updating it.

0.1.5 (2015-07-15)
~~~~~~~~~~~~~~~~~~

* Fixed a bug in ``EnforceValidationFieldMixin`` that it was overwriting ``to_internal_value`` instead of ``run_validation``

0.1.4 (2015-07-13)
~~~~~~~~~~~~~~~~~~

* Test coverage is now at 100%!

0.1.3 (2015-07-10)
~~~~~~~~~~~~~~~~~~

* Fixed bugs in ``AllowBlankNullFieldMixin``
* All DRF fields not subclass both ``AllowBlankNullFieldMixin`` and ``EmptyStringFieldMixin``

0.1.2 (2015-07-02)
~~~~~~~~~~~~~~~~~~

* Added custom ``to_representation()`` to ``EmptyStringFieldMixin`` which allows to pass empty string or ``None`` values.
  This is especially useful for fields like ``IntegerField`` which would blow up when passing empty string value for non-required fields.

0.1.1 (2015-06-25)
~~~~~~~~~~~~~~~~~~

* Fixed a bug in ``FormSerializer`` which did not honor ``field_mapping`` in any of the subclasses

0.1.0 (2015-06-15)
~~~~~~~~~~~~~~~~~~

* First release on PyPI.


Credits
-------

Development Lead
~~~~~~~~~~~~~~~~

* Mike Waters - https://github.com/mikewaters
* Miroslav Shubernetskiy - https://github.com/miki725

Contributors
~~~~~~~~~~~~

* Khaled Porlin - https://github.com/porlin72
* Agam Dua - https://github.com/agamdua
* Marc Marta - https://github.com/mmarta
* ClairePhila - https://github.com/ClairePhila
* Ndubisi Onuora - https://github.com/NdubisiOnuora


License
-------

::

    The MIT License (MIT)

    Copyright (c) 2015, dealertrack technologies

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.


